name: "Deploy"
description: "Update values in relevant repo to trigger deployment by ArgoCD (or other CD tools)"
inputs:
  deploy_repo_org:
    default: 'CloudWebManage'
    description: 'Github org of the repo to deploy to'
  deploy_repo_name:
    default: 'cwm-worker-cluster'
    description: 'Name of the repo to deploy to'
  deploy_key_b64:
    required: true
    description: 'Base64 encoded deploy key with write access to the target repo'
  content:
    required: true
    description: 'Content to write to the values file'
  file_path:
    required: true
    description: 'Path to the file to write the content to'
  git_user_name:
    default: 'GitHub Actions'
    description: 'Git user name for the commit'
  git_user_email:
    default: 'actions@localhost'
    description: 'Git user email for the commit'
  commit_message:
    required: true
    description: 'Commit message'
  wait_for_deployment_json:
    default: ''
    description: 'Optional JSON, if set passed to wait-for-deployment action'
runs:
  using: composite
  steps:
    - name: deploy
      shell: bash
      env:
        CONTENT: ${{ inputs.content }}
        COMMIT_MESSAGE: ${{ inputs.commit_message }}
      run: |
        for i in {1..5}; do
          if (
            echo "${{ inputs.deploy_key_b64 }}" | base64 -d > /tmp/deploy_key
            chmod 600 /tmp/deploy_key
            export GIT_SSH_COMMAND="ssh -i /tmp/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            git config --global user.name "${{ inputs.git_user_name }}"
            git config --global user.email "${{ inputs.git_user_email }}"
            git clone "git@github.com:${{ inputs.deploy_repo_org }}/${{ inputs.deploy_repo_name }}.git"
            pushd "${{ inputs.deploy_repo_name }}"
            mkdir -p "$(dirname "${{ inputs.file_path }}")"
            echo "${CONTENT}" > "${{ inputs.file_path }}"
            git add "${{ inputs.file_path }}"
            git commit -m "${COMMIT_MESSAGE}"
            git push origin main
            popd
          ); then
            exit 0
          else
            SLEEP_SECONDS=$((RANDOM % 10 + 1))
            echo "Failed to deploy, retrying in $SLEEP_SECONDS seconds... (attempt $i of 5)"
            sleep $SLEEP_SECONDS
          fi
        done
        echo "Failed to deploy after 5 attempts"
        exit 1
    - if: ${{ inputs.wait_for_deployment_json != '' }}
      uses: CloudWebManage/cwm-iac/actions/wait-for-deployment@main
      with:
        json: ${{ inputs.wait_for_deployment_json }}
