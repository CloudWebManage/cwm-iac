tenant:
  tenant:
    name: ""
    image:
      repository: quay.io/minio/minio
      tag: RELEASE.2025-04-08T15-41-24Z
      pullPolicy: IfNotPresent
    configSecret:
      name: ""
    metrics:
      enabled: false

loki:
  loki:
    auth_enabled: false
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    storage:
      bucketNames:
        chunks: "loki-chunks"
        ruler: "loki-ruler"
        admin: "loki-admin"
    storage_config:
      aws:
        s3forcepathstyle: true
        s3: ""  # http<s>://<username>:<secret>@<fqdn>:<port>
    querier:
      max_concurrent: 4
    pattern_ingester:
      enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
      retention_period: 120h
    commonConfig:
      replication_factor: 1
  deploymentMode: SimpleScalable
  backend:
    replicas: 1
    tolerations:
      - key: cwm-iac-worker-role
        operator: Equal
        value: system
        effect: NoExecute
  read:
    replicas: 1
    tolerations:
      - key: cwm-iac-worker-role
        operator: Equal
        value: system
        effect: NoExecute
  write:
    replicas: 1
    tolerations:
      - key: cwm-iac-worker-role
        operator: Equal
        value: system
        effect: NoExecute
  chunksCache:
    tolerations:
      - key: cwm-iac-worker-role
        operator: Equal
        value: system
        effect: NoExecute
  gateway:
    nginxConfig:
      resolver: "169.254.20.10"
    tolerations:
      - key: cwm-iac-worker-role
        operator: Equal
        value: system
        effect: NoExecute
  resultsCache:
    tolerations:
      - key: cwm-iac-worker-role
        operator: Equal
        value: system
        effect: NoExecute

alloy:
  controller:
    tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
        effect: "NoExecute"
      - key: cwm-iac-worker-role
        operator: Exists
        effect: NoExecute
    volumes:
      extra:
        - name: varlibrancher
          hostPath:
            path: /var/lib/rancher
  alloy:
    mounts:
      varlog: true
      extra:
        - name: varlibrancher
          mountPath: /var/lib/rancher
          readOnly: true
    configMap:
      content: |
        loki.write "default" {
          endpoint {
            url = "http://logging-loki-gateway/loki/api/v1/push"
          }
        }
        
        logging {
          level = "debug"
        }
        
        // pods //
        
        discovery.kubernetes "pod" {
          role = "pod"
        }
        discovery.relabel "pod" {
          targets = discovery.kubernetes.pod.targets
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            target_label  = "namespace"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label  = "pod_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            target_label  = "container_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_node_name"]
            target_label  = "node_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
            separator = "_"
            target_label  = "service_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name", "__meta_kubernetes_pod_uid"]
            target_label  = "__log_pods_subpath"
            separator     = "_"
          }
          rule {
            source_labels = ["__log_pods_subpath", "__meta_kubernetes_pod_container_name"]
            target_label  = "__path__"
            separator     = "/"
            replacement   = "/var/log/pods/$1/*.log"
          }
        }
        local.file_match "pod" {
          path_targets = discovery.relabel.pod.output
        }
        loki.source.file "pod" {
          targets    = local.file_match.pod.targets
          forward_to = [loki.write.default.receiver]
        }
        
        // kubelet //
        
        loki.source.file "kubelet" {
          targets    = [
            {
              __path__ = "/var/lib/rancher/rke2/agent/logs/kubelet.log",
              "node_name" = sys.env("HOSTNAME"),
              "service_name" = "kubelet",
            },
          ]
          forward_to = [loki.write.default.receiver]
        }

        // systemd //
        
        loki.relabel "journal" {
          forward_to = []
        
          rule {
            source_labels = ["__journal__systemd_unit"]
            target_label  = "unit"
          }
        }
        
        loki.source.journal "journal"  {
          path          = "/var/log/journal"
          forward_to    = [loki.write.default.receiver]
          relabel_rules = loki.relabel.journal.rules
          labels        = {service_name = "systemd"}
        }
